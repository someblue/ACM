FILE 是 I/O 系统用的。不同编译器结构不完全相同。
char* _ptr;    文件指针当前位置，缓冲区内 马上读和写的位置。
 int _cnt;  缓冲区内 现有可以读的字符个数
char* _base;  缓冲区
int _flag; 文件流 特征标志，例如：只读，只写，读写，错误，文件结束，2进制文件。
int _file;  系统里文件属性，例如：谁可以读写（用户自己，用户组，管理员）。
int _charbuf; -- 供 ungetc() 使用的缓冲存储单元。
int _bufsiz;  已分配的缓冲区的大小。
char* _tmpfname; 临时文件名

//--------------------------------------------------------------------------------------------
typedef struct{
short		level;		缓冲区使用量
unsigned	flags;		文件状态标志
char		fd;		文件描述符
short		bsize;		缓冲区大小
unsigned char	*buffer;	文件缓冲区首地址
unsigned char	*curp;		指向文件缓冲区的工作指针
unsigned char 	hold;		其他信息
unsigned	istemp;
short		token;
}FILE;

//--------------------------------------------------------------------------------------------
struct __sFILE64 {
#  if !defined _AEABI_PORTABILITY_LEVEL || _AEABI_PORTABILITY_LEVEL == 0
  unsigned char *_p;	/* current position in (some) buffer */
  int	_r;		/* read space left for getc() */
  int	_w;		/* write space left for putc() */
  short	_flags;		/* flags, below; this FILE is free if 0 */
  short	_file;		/* fileno, if Unix descriptor, else -1 */
  struct __sbuf _bf;	/* the buffer (at least 1 byte, if !NULL) */
  int	_lbfsize;	/* 0 or -_bf._size, for inline putc */

  struct _reent *_data;

  /* operations */
  _PTR	_cookie;	/* cookie passed to io functions */

  _READ_WRITE_RETURN_TYPE _EXFUN((*_read),(struct _reent *, _PTR,
					   char *, int));
  _READ_WRITE_RETURN_TYPE _EXFUN((*_write),(struct _reent *, _PTR,
					    const char *, int));
  _fpos_t _EXFUN((*_seek),(struct _reent *, _PTR, _fpos_t, int));
  int _EXFUN((*_close),(struct _reent *, _PTR));

  /* separate buffer for long sequences of ungetc() */
  struct __sbuf _ub;	/* ungetc buffer */
  unsigned char *_up;	/* saved _p when _p is doing ungetc data */
  int	_ur;		/* saved _r when _r is counting ungetc data */

  /* tricks to meet minimum requirements even when malloc() fails */
  unsigned char _ubuf[3];	/* guarantee an ungetc() buffer */
  unsigned char _nbuf[1];	/* guarantee a getc() buffer */

  /* separate buffer for fgetline() when line crosses buffer boundary */
  struct __sbuf _lb;	/* buffer for fgetline() */

  /* Unix stdio files get aligned to block boundaries on fseek() */
  int	_blksize;	/* stat.st_blksize (may be != _bf._size) */
  int   _flags2;        /* for future use */

  _off64_t _offset;     /* current lseek offset */
  _fpos64_t _EXFUN((*_seek64),(struct _reent *, _PTR, _fpos64_t, int));

#   ifndef __SINGLE_THREAD__
  _flock_t _lock;	/* for thread-safety locking */
#   endif
#  endif /* _AEABI_PORTABILITY_LEVEL */
  _mbstate_t _mbstate;	/* for wide char stdio functions. */
};