A: 判断有向图是否有环，这里可以用拓扑排序判断是否为DAG。不过结点是用字符串表示的，所以需要对字符串映射，这里可以用到STL中的map或手写hash函数。
给出一个个人常用的字符串映射到数字的函数，用STL中的map。
#include <map>
#include <string>
using namespace std;
map<string, int> id;
inline int get_id(const string &s) {
	if (id.find(s) == id.end()) id[s] = id.size(); // 下标从1开始
	return id[s];
}

B: 贪心。因为输入已经排好序了，所以可以直接统计输入值。在不超过个数和总和上限的前提下，不停的加入元素即可。

C: 最小生成树裸题。目标是求出最小生成树和最大生成数权值之和，输出的时候判断和的奇偶性。

D: 简单递推DP，或搜索。状态两维，dp[i][j]表示第i间房子涂颜色j，转移是dp[i][j] = min{dp[i - 1][k](k != j)} + cost[i][j]。

E: 这题稍有难度，不过思想是相当明确的。假设所求是F(n) = A + A^2 + .. + A^n（表示A的n次幂），那么可以分以下两种情况：
1. n为奇数时，F(n) = (F(n / 2) * A^(n / 2) + F(n / 2)) * A + A;
2. n为偶数时，F(n) = F(n / 2) * A^(n / 2) + F(n / 2).
也可以通过叠加的方式计算，详细参考代码：http://acm.hust.edu.cn/vjudge/contest/viewSource.action?id=2022434
（重点参考cal函数，其他符号重载可以先忽略）

F: KMP+SA（Suffix Array，后缀数组）。做这题前，可以先参考如何用SA的height数组统计一个字符串不同子串的数目。原理相似，只需稍作变型。